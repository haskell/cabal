# NB: don't set `language: haskell` here
# We specify language: c, so it doesn't default to e.g. ruby
language: c

sudo: false

# The following enables several GHC versions to be tested; often it's enough to
# test only against the last release in a major GHC version. Feel free to omit
# lines listings versions you don't need/want testing for.
matrix:
  include:
   - env: GHCVER=none SCRIPT=meta
     os: linux
   # These don't have -dyn/-prof whitelisted yet, so we have to
   # do the old-style installation
   - env: GHCVER=7.4.2 SCRIPT=script
     os: linux
     sudo: required
   - env: GHCVER=7.6.3 SCRIPT=script
     os: linux
     sudo: required
   - env: GHCVER=7.8.4 SCRIPT=script
     os: linux
     sudo: required
   # Ugh, we'd like to drop 'sudo: required' and use the
   # apt plugin for the next two
   # but the GCE instance we get has more memory, which makes
   # a big difference
   - env: GHCVER=7.10.3 SCRIPT=script
     os: linux
     sudo: required
   - env: GHCVER=8.0.1 SCRIPT=script DEPLOY_DOCS=YES
     sudo: required
     os: linux
   - env: GHCVER=8.0.1 SCRIPT=bootstrap
     sudo: required
     os: linux
   # It's not worth the trouble to make older GHC work with clang's cpp
   # TEST_OLDER is not implemented on OSX
   #
   # Also we might want to specify OSX version
   # https://docs.travis-ci.com/user/osx-ci-environment/#OS-X-Version
   - env: GHCVER=7.8.4 SCRIPT=script
     os: osx
   - env: GHCVER=7.10.3 SCRIPT=script
     os: osx
   - env: GHCVER=8.0.1 SCRIPT=script
     os: osx
  allow_failures:
   - env: GHCVER=head
     sudo: required

 # TODO add PARSEC_BUNDLED=YES when it's so
 # It seems pointless to run head if we're going to ignore the results.
 #- GHCVER=head

# Note: the distinction between `before_install` and `install` is not important.
before_install:
 - export PATH=/opt/ghc/$GHCVER/bin:$PATH
 - export PATH=$HOME/.ghc-install/$GHCVER/bin:$PATH
 - export PATH=$HOME/bin:$PATH
 - export PATH=$HOME/.cabal/bin:$PATH
 - export PATH=/opt/cabal/1.24/bin:$PATH
 - export PATH=/opt/happy/1.19.5/bin:$PATH
 - ./travis-install.sh

 # Set up deployment to the haskell/cabal-website repo.
 # NB: these commands MUST be in .travis.yml, otherwise the secret key can be
 # leaked! See https://github.com/travis-ci/travis.rb/issues/423.
 # umask to get the permissions to be 400.
 - if [ "x$TRAVIS_PULL_REQUEST" = "xfalse" -a "x$TRAVIS_BRANCH" = "xmaster" -a "x$DEPLOY_DOCS" = "xYES"  ]; then (umask 377 && openssl aes-256-cbc -K $encrypted_edaf6551664d_key -iv $encrypted_edaf6551664d_iv -in id_rsa_cabal_website.aes256.enc -out ~/.ssh/id_rsa -d); fi

install:
 # We intentionally do not install anything before trying to build Cabal because
 # it should build with each supported GHC version out-of-the-box.

# Here starts the actual work to be performed for the package under test; any
# command which exits with a non-zero exit code causes the build to fail. Using
# ./dist/setup/setup here instead of cabal-install to avoid breakage when the
# build config format changed.
script:
 - ./travis-${SCRIPT}.sh

cache:
 directories:
 - $HOME/.cabal/packages
 - $HOME/.cabal/store
 - $HOME/.cabal/bin

# We remove the index because it churns quite a bit and we don't want
# to pay the cost of repeatedly caching it even though we don't care
# about most changing packages.
before_cache:
 - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
 - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index*

# Deploy Haddocks to the haskell/cabal-website repo.
after_success:
 - ./travis-deploy.sh

notifications:
  irc:
    channels:
      - "chat.freenode.net##haskell-cabal"
  slack: haskell-cabal:sCq6GLfy9N8MJrInosg871n4

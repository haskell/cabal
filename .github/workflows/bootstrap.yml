name: Bootstrap

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types:
      - created

jobs:

  config:
    runs-on: ubuntu-latest
    # `matrix` can't access `env`, but it can access `outputs` from `needs` jobs.
    # So we have to "export" some things here as job outputs. Additionally, we can't
    # load `env` persistently from here. But we can export a string that can be `run`
    # to load up the environment for individual jobs. This may change later: GitHub
    # claims that YAML anchors are coming later in 2025.
    outputs:
      # expose the configuration variables for use by jobs
      GHC_FOR_RELEASE: ${{ steps.conf.outputs['GHC_FOR_RELEASE'] }}
      GHC_FOR_SOLVER_BENCHMARKS: ${{ steps.conf.outputs['GHC_FOR_SOLVER_BENCHMARKS'] }}
      GHC_FOR_COMPLETE_HACKAGE_TESTS: ${{ steps.conf.outputs['GHC_FOR_COMPLETE_HACKAGE_TESTS'] }}
      GHC_FOR_VALIDATE: ${{ steps.conf.outputs['GHC_FOR_VALIDATE'] }}
      GHC_FOR_VALIDATE_ONLY: ${{ steps.conf.outputs['GHC_FOR_VALIDATE_ONLY'] }}
      GHC_FOR_VALIDATE_OLD: ${{ steps.conf.outputs['GHC_FOR_VALIDATE_OLD'] }}
      GHC_FOR_VALIDATE_ALL: ${{ steps.validates.outputs.result }}
      COMMON_FLAGS: ${{ steps.conf.outputs['COMMON_FLAGS'] }}
      LTS_RELEASE: ${{ steps.conf.outputs['LTS_RELEASE'] }}
      # convenience for loading these into the environment
      env: |
        echo "GHC_FOR_RELEASE='${{ steps.conf.outputs.GHC_FOR_RELEASE }}'" >> "$GITHUB_ENV"
        echo "GHC_FOR_SOLVER_BENCHMARKS='${{ steps.conf.outputs.GHC_FOR_SOLVER_BENCHMARKS }}'" >> "$GITHUB_ENV"
        echo "GHC_FOR_COMPLETE_HACKAGE_TESTS='${{ steps.conf.outputs.GHC_FOR_COMPLETE_HACKAGE_TESTS }}'" >> "$GITHUB_ENV"
        echo "GHC_FOR_VALIDATE='${{ steps.conf.outputs.GHC_FOR_VALIDATE }}'" >> "$GITHUB_ENV"
        echo "GHC_FOR_VALIDATE_ONLY='${{ steps.conf.outputs.GHC_FOR_VALIDATE_ONLY }}'" >> "$GITHUB_ENV"
        echo "GHC_FOR_VALIDATE_ALL='${{ steps.validates.outputs.result }}'" >> "$GITHUB_ENV"
        echo "GHC_FOR_VALIDATE_OLD='${{ steps.conf.outputs.GHC_FOR_VALIDATE_OLD }}'" >> "$GITHUB_ENV"
        echo "COMMON_FLAGS='${{ steps.conf.outputs.COMMON_FLAGS }}'" >> "$GITHUB_ENV"
        echo "LTS_RELEASE='${{ steps.conf.outputs.LTS_RELEASE }}'" >> "$GITHUB_ENV"
    steps:
      - uses: actions/checkout@v5

      - uses: pietrobolcato/action-read-yaml@1.1.0
        id: conf
        with:
          config: ${{ github.workspace }}/.github/config.yml

      # a bit of a hack: combine FOR_VALIDATE and FOR_VALIDATE_ONLY
      - uses: actions/github-script@v7
        id: validates
        env:
          LIST1: ${{ steps.conf.outputs['GHC_FOR_VALIDATE'] }}
          LIST2: ${{ steps.conf.outputs['GHC_FOR_VALIDATE_ONLY'] }}
        with:
          script: |
            const list1 = process.env.LIST1
            const list2 = process.env.LIST2
            return [...JSON.parse(list1), ...JSON.parse(list2)]

  bootstrap:
    needs: config
    strategy:
      matrix:
        os: [ubuntu-latest]
        # see .github/config.yml
        ghc: ${{ fromJSON(needs.config.outputs.GHC_FOR_VALIDATE) }}
#        ghc: ${{ fromJSON('["9.12.2", "9.10.2", "9.8.4", "9.6.7", "9.4.8", "9.2.8"]') }}
        include:
          - os: macos-latest
            ghc: "9.2.8"
    name: Bootstrap ${{ matrix.os }} ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Work around XDG directories existence (haskell-actions/setup#62)
        if: ${{ runner.os == 'macOS' }}
        run: |
          rm -rf ~/.config/cabal
          rm -rf ~/.cache/cabal

      - uses: actions/cache@v4
        name: Cache the downloads
        id: bootstrap-cache
        with:
          path: "/home/runner/work/cabal/cabal/_build"
          key: bootstrap-${{ runner.os }}-${{ matrix.ghc }}-20221115-${{ github.sha }}
          restore-keys: bootstrap-${{ runner.os }}-${{ matrix.ghc }}-20221115-

      - uses: actions/checkout@v5

      - uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}

      - name: bootstrap.py
        run: |
          GHC_VERSION=${{ matrix.ghc }}
          # Fetch the bootstrap sources (we use linux dependencies also on macos)
          python3 bootstrap/bootstrap.py -d bootstrap/linux-$GHC_VERSION.json fetch

          # Bootstrap using the bootstrap sources
          python3 bootstrap/bootstrap.py --bootstrap-sources bootstrap-sources.tar.gz

      - name: Smoke test
        run: |
          _build/bin/cabal --version

      - uses: actions/upload-artifact@v4
        with:
          name: cabal-${{ matrix.os }}-${{ matrix.ghc }}-bootstrapped
          path: _build/artifacts/*

  # We use this job as a summary of the workflow
  # It will fail if any of the previous jobs does it
  # This way we can use it exclusively in branch protection rules
  # and abstract away the concrete jobs of the workflow, including their names
  bootstrap-post-job:
    if: always()
    name: Bootstrap post job
    runs-on: ubuntu-latest
    # IMPORTANT! Any job added to the workflow should be added here too
    needs: [bootstrap]

    steps:
      - run: |
          echo "jobs info: ${{ toJSON(needs) }}"
      - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1

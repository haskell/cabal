name: Check sdist

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types:
      - created

jobs:

  # Dogfood the generated sdist, to avoid bugs like https://github.com/haskell/cabal/issues/9833
  # No caching, since the point is to verify they can be installed "from scratch"
  # Don't run on master or a PR targeting master, because there's never an installable Cabal
  dogfood-sdists:
    name: Dogfood sdist on ghc-${{ matrix.ghc }}
    if: github.ref != 'refs/heads/master' && github.base_ref != 'master'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # this should be kept up to date with the list in validate.yml, but should be the
        # *first* compiler release so we validate against what is hopefully the first
        # release of a corresponding Cabal and friends. it can also be short since it's
        # highly unlikely that we are releasing really old branches.
        ghc:
          ["9.12.1", "9.10.1", "9.8.1", "9.6.1"]

    steps:

      - uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: latest

      - uses: actions/checkout@v4

      - name: Make sdists
        run: |
          cabal sdist Cabal-syntax Cabal Cabal-hooks cabal-install-solver cabal-install

      - name: Install from sdist
        run: |
          # skip if a suitable Cabal isn't in this ghc's bootlibs, since that's the case
          # that causes failures for users (otherwise cabal-install will install a matching
          # version itself)
          # we only want to test cabal-install, to ensure that it works with existing Cabals
          # (don't look at this too closely)
          sdist="$(ls dist-newstyle/sdist/cabal-install-*.tar.gz | sed -n '\,^dist-newstyle/sdist/cabal-install-[0-9.]*\.tar\.gz$,{;p;q;}')"
          # extract the cabal-install major version
          ver="$(echo "$sdist" | sed -n 's,^dist-newstyle/sdist/cabal-install-\([0-9][0-9]*\.[0-9][0-9]*\)\.[0-9.]*\.tar\.gz$,\1,p')"
          # dunno if this will ever be extended to freebsd, but grep -q is a gnu-ism
          if ghc-pkg --global --simple-output list Cabal | grep "^Cabal-$ver\\." >/dev/null; then
            # sigh, someone broke installing from tarballs
            rm -rf cabal*.project Cabal-syntax Cabal Cabal-hooks cabal-install-solver cabal-install
            tar xfz "$sdist"
            cd "cabal-install-"*
            # note: we have all the sdists in a `package-env` because sometimes we need
            # to allow newer versions of Cabal (for example, we're using something that
            # was added to Cabal, which isn't a PVP violation as long as the old API is
            # still there). This _shouldn't_ affect how the solver picks versions, so it
            # should be safe.
            here="$(pwd)"
            for pkg in Cabal-syntax Cabal Cabal-hooks cabal-install-solver; do
              # need ver suffix here so e.g. Cabal-* doesn't match Cabal-syntax-*
              echo "Building $pkg-$ver"
              tar xfz "$here/../dist-newstyle/sdist/$pkg-$ver"*".tar.gz"
              (cd "$pkg-$ver"*; cabal install --lib --package-env="$here")
            done
            echo "Sanity check"
            ls -l "$here/.ghc"*
            cat "$here/.ghc"*
            echo "Building cabal-install-$ver"
            cabal install --package-env="$here"
          else
            echo No matching bootlib Cabal version to test against.
            exit 0
          fi

  check-sdist-post-job:
    if: always()
    name: Check sdist post job
    runs-on: ubuntu-latest
    # IMPORTANT! Any job added to the workflow should be added here too
    needs: [dogfood-sdists]

    steps:
      - run: |
          echo "jobs info: ${{ toJSON(needs) }}"
      - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1


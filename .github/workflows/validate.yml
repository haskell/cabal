name: Validate

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types:
      - created
  workflow_call:

  # See https://github.com/haskell/cabal/blob/master/CONTRIBUTING.md#hackage-revisions
  workflow_dispatch:
    inputs:
      allow-newer:
        description: allow-newer line
        required: false
        type: string
      constraints:
        description: constraints line
        required: false
        type: string

jobs:

  config:
    runs-on: ubuntu-latest
    # `matrix` can't access `env`, but it can access `outputs` from `needs` jobs.
    # So we have to "export" some things here as job outputs.
    #
    # And GitHub documents that $GITHUB_ENV doesn't persist between jobs, only between
    # steps. But somehow the `validate` job was getting it anyway, while `build-alpine`
    # wasn't.
    #
    # I give up. Everything is now explicitly (GitHub hasn't invented iteration yet) listed
    # as an output and (again explicitly) loaded into the environment in the first step of
    # each job. Thanks, GitHub. (Some parts of it are not obviously used, because you need
    # to dig around the local actions to see where other parts are used. $COMMON_FLAGS is
    # one notable example.)
    #
    # Oh, and anchors aren't supported either, so yes, it has to be copy-pasted. Thanks again.
    # (Actually, somehow GitHub missed making ${{ }} expansions illegal in `run`.)
    outputs:
      # expose the configuration variables for use by jobs
      GHC_FOR_RELEASE: ${{ steps.conf.outputs['GHC_FOR_RELEASE'] }}
      GHC_FOR_SOLVER_BENCHMARKS: ${{ steps.conf.outputs['GHC_FOR_SOLVER_BENCHMARKS'] }}
      GHC_FOR_COMPLETE_HACKAGE_TESTS: ${{ steps.conf.outputs['GHC_FOR_COMPLETE_HACKAGE_TESTS'] }}
      GHC_FOR_VALIDATE: ${{ steps.conf.outputs['GHC_FOR_VALIDATE'] }}
      GHC_FOR_VALIDATE_OLD: ${{ steps.conf.outputs['GHC_FOR_VALIDATE_OLD'] }}
      COMMON_FLAGS: ${{ steps.conf.outputs['COMMON_FLAGS'] }}
      LTS_RELEASE: ${{ steps.conf.outputs['LTS_RELEASE'] }}
      # convenience for loading these into the environment
      env: |
        echo "GHC_FOR_RELEASE=${{ steps.conf.outputs['GHC_FOR_RELEASE'] }}" >> "$GITHUB_ENV"
        echo "GHC_FOR_SOLVER_BENCHMARKS=${{ steps.conf.outputs['GHC_FOR_SOLVER_BENCHMARKS'] }}" >> "$GITHUB_ENV"
        echo "GHC_FOR_COMPLETE_HACKAGE_TESTS=${{ steps.conf.outputs['GHC_FOR_COMPLETE_HACKAGE_TESTS'] }}" >> "$GITHUB_ENV"
        echo "GHC_FOR_VALIDATE=${{ steps.conf.outputs['GHC_FOR_VALIDATE'] }}" >> "$GITHUB_ENV"
        echo "GHC_FOR_VALIDATE_OLD=${{ steps.conf.outputs['GHC_FOR_VALIDATE_OLD'] }}" >> "$GITHUB_ENV"
        echo "COMMON_FLAGS=${{ steps.conf.outputs['COMMON_FLAGS'] }}" >> "$GITHUB_ENV"
        echo "LTS_RELEASE=${{ steps.conf.outputs['LTS_RELEASE'] }}" >> "$GITHUB_ENV"
    steps:
      - uses: actions/checkout@v5

      - uses: pietrobolcato/action-read-yaml@1.1.0
        id: conf
        with:
          config: ${{ github.workspace }}/.github/config.yml

  validate-build:
    name: Validate build ${{ matrix.sys.os }} ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.sys.os }}
    needs: config
    strategy:
      fail-fast: false
      # The matrix has to be duplicated in multiple places, because it never
      # occurred to the YAML "programmers" at GitHub that it might be useful to
      # refer to it in multiple jobs.
      matrix:
        sys:
          # 'bash' on Windows apparently gets you the one from Git for Windows,
          # whereas this needs the one from msys
          - { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
          - { os: ubuntu-latest, shell: bash }
          - { os: macos-latest, shell: bash }
        ghc: ${{ fromJSON(needs.config.outputs.GHC_FOR_VALIDATE) }}
        exclude:
          # Throws fatal "cabal-tests.exe: fd:8: hGetLine: end of file" exception
          # even with --io-manager=native
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "9.0.2"
          # corrupts GHA cache or the fabric of reality itself, see https://github.com/haskell/cabal/issues/8356
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "8.10.7"
          # lot of segfaults caused by ghc bugs
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "8.8.4"
          # ghc before 8.10.5 doesn't run on AArch64
          # 9.0.2 suffers from https://gitlab.haskell.org/ghc/ghc/-/issues/20592
          # 8.10.7 throws asm errors in hashable's cbits suggesting the runner doesn't
          # support a CPU extension for hardware SHA; may be fixable with flags
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "9.0.2"
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "8.10.7"
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "8.8.4"
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
      - run: ${{ needs.config.outputs.env }}

      - uses: actions/checkout@v5

      - uses: ./.github/actions/validate-build
        with:
          shell: ${{ matrix.sys.shell }}
          ghc: ${{ matrix.ghc }}
          allow-newer: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.allow_newer || '' }}
          constraints: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.constraints || '' }}

  # We never validate this. We would probably have caught https://gitlab.haskell.org/ghc/ghc/-/issues/25087
  # if we had. (I'll do this in Tier 2 unless someone thinks there's a good reason to do it here; the need
  # for a container means it can't be shared reasonably unless everything is changed to use one like
  # https://github.com/haskell/cabal/pull/9437 does in its release workflow.)
  build-alpine:
    name: Build statically linked using alpine
    runs-on: ubuntu-latest
    container: "alpine:3.20"
    needs: config
    steps:
      - run: ${{ needs.config.outputs.env }}
        shell: sh

      - name: Install extra dependencies
        shell: sh
        run: |
          apk add bash curl sudo jq pkgconfig \
          zlib-dev zlib-static binutils-gold curl \
          gcc g++ gmp-dev libc-dev libffi-dev make \
          musl-dev ncurses-dev perl tar xz git

      # Apparently there's some permissions thing inside vs. outside the container
      # that Alpine's git doesn't like. Hack around it.
      - run: git config --global --add safe.directory $(pwd)

      - uses: actions/checkout@v5

      - uses: ./.github/actions/validate-build
        with:
          ghc: ${{ env.GHC_FOR_RELEASE }}
          static: 'true'
          allow-newer: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.allow_newer || '' }}
          constraints: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.constraints || '' }}

  # First, apparently it is now necessary to split out _only_ `cli-suite`. (Because somehow that was supposed to make this "simpler")
  # Second, supposedly I can use `include` to add in the `solver-benchmarks` tests, but if I do
  # I get an incomprehensible error about `runs-on` being empty.
  validate-tests:
    name: Validate tests ${{ matrix.sys.os }} ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.sys.os }}
    needs: [config, validate-build]
    strategy:
      fail-fast: false
      # sadly, `matrix` can't be copied and GHA doesn't yet support anchors (2nd half of 2025 supposedly)
      matrix:
        sys:
          - { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
          - { os: ubuntu-latest, shell: bash }
          - { os: macos-latest, shell: bash }
        ghc: ${{ fromJSON(needs.config.outputs.GHC_FOR_VALIDATE) }}
        exclude:
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "9.0.2"
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "8.10.7"
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "8.8.4"
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "9.0.2"
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "8.10.7"
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "8.8.4"
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
      - run: ${{ needs.config.outputs.env }}

      - uses: actions/checkout@v5

      - uses: ./.github/actions/cabal-setup
        with:
          shell: ${{ matrix.sys.shell }}
          ghc: ${{ matrix.ghc }}
          allow-newer: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.allow_newer || '' }}
          constraints: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.constraints || '' }}

      # Note: we rely on cabal and the test suites being already cached here. If they aren't, this
      # may build them incorrectly and then possibly fail. (`cabal-setup` loads the cache for us.)
      # @@@ GHA now truncates caches, so must rewrite using artifacts
      - run: |
          echo ::group::lib-tests
          sh validate.sh $FLAGS -s lib-tests
          echo ::group::lib-suite
          sh validate.sh $FLAGS -s lib-suite
          echo ::group::cli-tests
          sh validate.sh $FLAGS -s cli-tests

  validate-cli:
    name: Validate CLI ${{ matrix.sys.os }} ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.sys.os }}
    needs: [config, validate-build]
    strategy:
      fail-fast: false
      # another `matrix` instance to be replaced with an anchor when available
      matrix:
        sys:
          - { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
          - { os: ubuntu-22.04, shell: bash }
          - { os: macos-latest, shell: bash }
        ghc: ${{ fromJSON(needs.config.outputs.GHC_FOR_VALIDATE) }}
        exclude:
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "9.0.2"
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "8.10.7"
          - sys:
              { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
            ghc: "8.8.4"
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "9.0.2"
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "8.10.7"
          - sys:
              { os: macos-latest, shell: bash }
            ghc: "8.8.4"
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
      - run: ${{ needs.config.outputs.env }}

      - uses: actions/checkout@v5

      - uses: ./.github/actions/cabal-setup
        with:
          shell: ${{ matrix.sys.shell }}
          ghc: ${{ matrix.ghc }}
          allow-newer: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.allow_newer || '' }}
          constraints: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.constraints || '' }}

      - run: |
          sh validate.sh $FLAGS -s cli-suite

  validate-solver:
    name: Validate solver ${{ matrix.sys.os }} ghc-${{ needs.config.outputs.GHC_FOR_SOLVER_BENCHMARKS }}
    runs-on: ${{ matrix.sys.os }}
    needs: [config, validate-build]
    strategy:
      fail-fast: false
      matrix:
        sys:
          - { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
          - { os: ubuntu-22.04, shell: bash }
          - { os: macos-latest, shell: bash }
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
      - run: ${{ needs.config.outputs.env }}

      - uses: actions/checkout@v5

      - uses: ./.github/actions/cabal-setup
        with:
          shell: ${{ matrix.sys.shell }}
          ghc: ${{ needs.config.outputs.GHC_FOR_SOLVER_BENCHMARKS }}
          allow-newer: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.allow_newer || '' }}
          constraints: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.constraints || '' }}

      - run: |
          echo ::group::solver-benchmarks-tests
          sh validate.sh $FLAGS -s solver-benchmarks-tests
          echo ::group::solver-benchmarks-run
          sh validate.sh $FLAGS -s solver-benchmarks-run

  validate-old-ghcs:
    name: Validate old ghcs ubuntu-22.04 ${{ matrix.extra-ghc }}
    runs-on: ubuntu-22.04
    needs: [config, validate-build]

    strategy:
      matrix:
        extra-ghc: ${{ fromJSON(needs.config.outputs.GHC_FOR_VALIDATE_OLD) }}
      fail-fast: false

    steps:
      - run: ${{ needs.config.outputs.env }}
        shell: bash

      - uses: actions/checkout@v5

      - uses: ./.github/actions/validate-old
        with:
          shell: bash
          ghc: ${{ needs.config.outputs.GHC_FOR_RELEASE }}
          extra-ghc: ${{ matrix.extra-ghc }}

  # The previous jobs use a released version of cabal to build cabal HEAD itself
  # This one uses the cabal HEAD generated executable in `validate-build`
  # to build itself again, as sanity check
  dogfooding:
    name: Dogfooding ${{ matrix.sys.os }} ghc-${{ needs.config.outputs.GHC_FOR_RELEASE }}
    runs-on: ${{ matrix.sys.os }}
    needs: [config, validate-build]
    strategy:
      matrix:
        sys:
          # 'bash' on Windows apparently gets you the one from git for Windows,
          # whereas this needs the one from msys
          - { os: windows-latest, shell: "C:/msys64/usr/bin/bash.exe -e {0}" }
          - { os: ubuntu-22.04, shell: bash }
          - { os: macos-latest, shell: bash }
      fail-fast: false
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
      - run: ${{ needs.config.outputs.env }}

      - uses: actions/checkout@v5

      - uses: ./.github/actions/dogfooding
        with:
          ghc: ${{ needs.config.outputs.GHC_FOR_RELEASE }}
          shell: ${{ matrix.sys.shell }}
          allow-newer: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.allow_newer || '' }}
          constraints: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.constraints || '' }}

  # We use this job as a summary of the workflow
  # It will fail if any of the previous jobs does
  # This way we can use it exclusively in branch protection rules
  # and abstract away the concrete jobs of the workflow, including their names
  validate-post-job:
    if: always()
    name: Validate post job
    runs-on: ubuntu-latest
    # IMPORTANT! Any job added to the workflow should be added here too
    needs: [validate-build, validate-tests, validate-cli, validate-solver, validate-old-ghcs, build-alpine, dogfooding]

    steps:
      - run: |
          echo "jobs info: ${{ toJSON(needs) }}"
      - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1

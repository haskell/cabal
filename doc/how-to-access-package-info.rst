.. _accessing-data-files:

How to access package information from Haskell code
===================================================

The package description (also known as the .cabal file) contains a lot of
information about the package. Some of that information can be useful for
Haskell code within that package. A commandline tool, for example, often
wants to have access to the version of the package, so that it can output
the correct version of the executable on the console. This guide shows how
to access that kind of information from within Haskell modules.


Accessing the auto-generated modules
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To enable Haskell modules to use information from package descriptions, Cabal
generates two special modules for every package: A module called :file:`Paths_<package>`
and a module called :file:`PackageInfo_<package>`. Since the names of Haskell
modules must not contain any hyphens, they are replaced by underscores in the
name of the generated module. If your package is called ``my-app``, for example,
then the two modules :file:`PackageInfo_my_app` and :file:`Paths_my_app` are
generated.

.. Note::

   If you decide to import the :file:`PackageInfo_<package>` or :file:`Paths_<package>`
   module then it *must* be listed in the :pkg-field:`other-modules` field just
   like any other module in your package and on :pkg-field:`autogen-modules` as
   the file is autogenerated.

Unlike :file:`Paths_{pkgname}`, :file:`PackageInfo_{pkgname}` is system- and
path-independent. It aims to be easier to work with for hash-based tools such as Nix.

.. Note::

    Just like any other autogenerated module, the :file:`PackageInfo_<package>` and
    :file:`Paths_<package>` modules do not get included in the source tarballs generated
    by ``sdist``.

The PackageInfo_<package> module
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The autogenerated :file:`PackageInfo_{pkgname}` module exports the following
package-related constants:

.. code-block:: haskell

    name :: String
    version :: Version
    synopsis :: String
    copyright :: String
    homepage :: String

These constants correspond to the fields of the same name in the package description.

The Paths_<package> module
^^^^^^^^^^^^^^^^^^^^^^^^^^

The placement on the target system of files listed in
the :pkg-field:`data-files` field varies between systems, and in some cases
one can even move packages around after installation
(see :ref:`prefix independence`).

This module defines a function

.. code-block:: haskell

    getDataFileName :: FilePath -> IO FilePath

If the argument is a filename listed in the :pkg-field:`data-files` field, the
result is the name of the corresponding file on the system on which the
program is running.


The :file:`Paths_{pkgname}` module also includes some other useful
functions and values, which record the version of the package and some
other directories which the package has been configured to be installed
into (e.g. data files live in ``getDataDir``):

.. code-block:: haskell

    version :: Version

    getBinDir :: IO FilePath
    getLibDir :: IO FilePath
    getDynLibDir :: IO FilePath
    getDataDir :: IO FilePath
    getLibexecDir :: IO FilePath
    getSysconfDir :: IO FilePath

The actual location of all these directories can be individually
overridden at runtime using environment variables of the form
``pkg_name_var``, where ``pkg_name`` is the name of the package with all
hyphens converted into underscores, and ``var`` is either ``bindir``,
``libdir``, ``dynlibdir``, ``datadir``, ``libexedir`` or ``sysconfdir``. For example,
the configured data directory for ``pretty-show`` is controlled with the
``pretty_show_datadir`` environment variable.

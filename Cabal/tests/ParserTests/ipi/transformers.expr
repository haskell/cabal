InstalledPackageInfo
  {abiDepends = [`AbiDependency {depUnitId = UnitId "base-4.10.1.0", depAbiHash = AbiHash "35a7f6be752ee4f7385cb5bf28677879"}`],
   abiHash = `AbiHash "e04579c0363c9229351d1a0b394bf2d5"`,
   author = "Andy Gill, Ross Paterson",
   category = "Control",
   ccOptions = [],
   compatPackageKey = "transformers-0.5.2.0",
   copyright = "",
   dataDir = "/opt/ghc/8.2.2/share/x86_64-linux-ghc-8.2.2/transformers-0.5.2.0",
   depends = [`UnitId "base-4.10.1.0"`],
   description = concat
                   ["A portable library of functor and monad transformers, inspired by\n",
                    "the paper \\\"Functional Programming with Overloading and Higher-Order\n",
                    "Polymorphism\\\", by Mark P Jones,\n",
                    "in /Advanced School of Functional Programming/, 1995\n",
                    "(<http://web.cecs.pdx.edu/~mpj/pubs/springschool.html>).\n",
                    "\n",
                    "This package contains:\n",
                    "\n",
                    "* the monad transformer class (in \"Control.Monad.Trans.Class\")\n",
                    "and IO monad class (in \"Control.Monad.IO.Class\")\n",
                    "\n",
                    "* concrete functor and monad transformers, each with associated\n",
                    "operations and functions to lift operations associated with other\n",
                    "transformers.\n",
                    "\n",
                    "The package can be used on its own in portable Haskell code, in\n",
                    "which case operations need to be manually lifted through transformer\n",
                    "stacks (see \"Control.Monad.Trans.Class\" for some examples).\n",
                    "Alternatively, it can be used with the non-portable monad classes in\n",
                    "the @mtl@ or @monads-tf@ packages, which automatically lift operations\n",
                    "introduced by monad transformers through other transformers."],
   exposed = True,
   exposedModules = [`ExposedModule {exposedName = ModuleName ["Control","Applicative","Backwards"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Applicative","Lift"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Signatures"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Class"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Cont"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Error"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Except"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Identity"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","List"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Maybe"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","RWS"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","RWS","Lazy"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","RWS","Strict"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Reader"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","State"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","State","Lazy"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","State","Strict"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Writer"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Writer","Lazy"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Control","Monad","Trans","Writer","Strict"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Data","Functor","Constant"], exposedReexport = Nothing}`,
                     `ExposedModule {exposedName = ModuleName ["Data","Functor","Reverse"], exposedReexport = Nothing}`],
   extraGHCiLibraries = [],
   extraLibraries = [],
   frameworkDirs = [],
   frameworks = [],
   haddockHTMLs = ["/opt/ghc/8.2.2/share/doc/ghc-8.2.2/html/libraries/transformers-0.5.2.0"],
   haddockInterfaces = ["/opt/ghc/8.2.2/share/doc/ghc-8.2.2/html/libraries/transformers-0.5.2.0/transformers.haddock"],
   hiddenModules = [],
   homepage = "",
   hsLibraries = ["HStransformers-0.5.2.0"],
   importDirs = ["/opt/ghc/8.2.2/lib/ghc-8.2.2/transformers-0.5.2.0"],
   includeDirs = [],
   includes = [],
   indefinite = False,
   installedComponentId_ = `ComponentId ""`,
   installedUnitId = `UnitId "transformers-0.5.2.0"`,
   instantiatedWith = [],
   ldOptions = [],
   libraryDirs = ["/opt/ghc/8.2.2/lib/ghc-8.2.2/transformers-0.5.2.0"],
   libraryDynDirs = ["/opt/ghc/8.2.2/lib/ghc-8.2.2/transformers-0.5.2.0"],
   license = Right BSD3,
   maintainer = "Ross Paterson <R.Paterson@city.ac.uk>",
   pkgRoot = Just "/opt/ghc/8.2.2/lib/ghc-8.2.2",
   pkgUrl = "",
   sourceLibName = Nothing,
   sourcePackageId = PackageIdentifier
                       {pkgName = `PackageName "transformers"`,
                        pkgVersion = `mkVersion [0,5,2,0]`},
   stability = "",
   synopsis = "Concrete functor and monad transformers",
   trusted = False}

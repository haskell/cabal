GenericPackageDescription {
  packageDescription =
  PackageDescription {
    specVersion = CabalSpecV2_2,
    package = PackageIdentifier {
      pkgName = PackageName
        "jaeger-flamegraph",
      pkgVersion = mkVersion
        [1, 0, 0]},
    licenseRaw = Left
      (License
        (ELicense
          (ELicenseId BSD_3_Clause)
          Nothing)),
    licenseFiles = [
      SymbolicPath "LICENSE"],
    copyright =
    "(c) 2018 Symbiont.io",
    maintainer = "Sam Halliday",
    author = "Sam Halliday",
    stability = "",
    testedWith = [
      _×_
        GHC
        (UnionVersionRanges
          (MajorBoundVersion
            (mkVersion [8, 4, 4]))
          (MajorBoundVersion
            (mkVersion [8, 6, 2])))],
    homepage = "",
    pkgUrl = "",
    bugReports =
    "https://github.com/symbiont-io/jaeger-flamegraph/pulls",
    sourceRepos = [
      SourceRepo {
        repoKind = RepoHead,
        repoType = Just
          (KnownRepoType Git),
        repoLocation = Just
          "https://github.com/symbiont-io/jaeger-flamegraph",
        repoModule = Nothing,
        repoBranch = Nothing,
        repoTag = Nothing,
        repoSubdir = Nothing}],
    synopsis =
    "Generate flamegraphs from Jaeger .json dumps.",
    description =
    concat
      [
        "This is a small tool to convert JSON dumps obtained from a Jaeger\n",
        "server (<https://www.jaegertracing.io/>) into a format consumable\n",
        "by [FlameGraph](https://github.com/brendangregg/FlameGraph).\n",
        "\n",
        "First download the traces for your SERVICE limiting to LIMIT traces\n",
        "\n",
        "> $ curl http://your-jaeger-installation/api/traces?service=SERVICE&limit=LIMIT > input.json\n",
        "\n",
        "using the [undocumented Jaeger API](https://github.com/jaegertracing/jaeger/issues/456#issuecomment-412560321)\n",
        "then use @jaeger-flamegraph@ to convert the data and send to @flamegraph.pl@\n",
        "\n",
        "> $ jaeger-flamegraph -f input.json | flamegraph.pl > output.svg\n"],
    category = "Testing",
    customFieldsPD = [],
    buildTypeRaw = Nothing,
    setupBuildInfo = Nothing,
    library = Nothing,
    subLibraries = [],
    executables = [],
    foreignLibs = [],
    testSuites = [],
    benchmarks = [],
    dataFiles = [],
    dataDir = ".",
    extraSrcFiles = [],
    extraTmpFiles = [],
    extraDocFiles = []},
  gpdScannedVersion = Nothing,
  genPackageFlags = [],
  condLibrary = Just
    CondNode {
      condTreeData = Library {
        libName = LMainLibName,
        exposedModules = [
          ModuleName "Interval"],
        reexportedModules = [],
        signatures = [],
        libExposed = True,
        libVisibility =
        LibraryVisibilityPublic,
        libBuildInfo = BuildInfo {
          buildable = True,
          buildTools = [],
          buildToolDepends = [],
          cppOptions = [],
          asmOptions = [],
          cmmOptions = [],
          ccOptions = [],
          cxxOptions = [],
          ldOptions = [],
          hsc2hsOptions = [],
          pkgconfigDepends = [],
          frameworks = [],
          extraFrameworkDirs = [],
          asmSources = [],
          cmmSources = [],
          cSources = [],
          cxxSources = [],
          jsSources = [],
          hsSourceDirs = [
            SymbolicPath "library"],
          otherModules = [],
          virtualModules = [],
          autogenModules = [],
          defaultLanguage = Just
            Haskell2010,
          otherLanguages = [],
          defaultExtensions = [],
          otherExtensions = [],
          oldExtensions = [],
          extraLibs = [],
          extraLibsStatic = [],
          extraGHCiLibs = [],
          extraBundledLibs = [],
          extraLibFlavours = [],
          extraDynLibFlavours = [],
          extraLibDirs = [],
          extraLibDirsStatic = [],
          includeDirs = [],
          includes = [],
          autogenIncludes = [],
          installIncludes = [],
          options = PerCompilerFlavor
            [
              "-Wall",
              "-Werror=missing-home-modules"]
            [],
          profOptions = PerCompilerFlavor
            []
            [],
          sharedOptions =
          PerCompilerFlavor [] [],
          staticOptions =
          PerCompilerFlavor [] [],
          customFieldsBI = [],
          targetBuildDepends = [
            Dependency
              (PackageName "base")
              (UnionVersionRanges
                (MajorBoundVersion
                  (mkVersion [4, 11, 1, 0]))
                (MajorBoundVersion
                  (mkVersion [4, 12, 0, 0])))
              mainLibSet,
            Dependency
              (PackageName "QuickCheck")
              (MajorBoundVersion
                (mkVersion [2, 12, 6, 1]))
              mainLibSet],
          mixins = []}},
      condTreeConstraints = [
        Dependency
          (PackageName "base")
          (UnionVersionRanges
            (MajorBoundVersion
              (mkVersion [4, 11, 1, 0]))
            (MajorBoundVersion
              (mkVersion [4, 12, 0, 0])))
          mainLibSet,
        Dependency
          (PackageName "QuickCheck")
          (MajorBoundVersion
            (mkVersion [2, 12, 6, 1]))
          mainLibSet],
      condTreeComponents = []},
  condSubLibraries = [],
  condForeignLibs = [],
  condExecutables = [
    _×_
      (UnqualComponentName
        "jaeger-flamegraph")
      CondNode {
        condTreeData = Executable {
          exeName = UnqualComponentName
            "jaeger-flamegraph",
          modulePath = "Main.hs",
          exeScope = ExecutablePublic,
          buildInfo = BuildInfo {
            buildable = True,
            buildTools = [],
            buildToolDepends = [],
            cppOptions = [],
            asmOptions = [],
            cmmOptions = [],
            ccOptions = [],
            cxxOptions = [],
            ldOptions = [],
            hsc2hsOptions = [],
            pkgconfigDepends = [],
            frameworks = [],
            extraFrameworkDirs = [],
            asmSources = [],
            cmmSources = [],
            cSources = [],
            cxxSources = [],
            jsSources = [],
            hsSourceDirs = [
              SymbolicPath "exe"],
            otherModules = [],
            virtualModules = [],
            autogenModules = [],
            defaultLanguage = Just
              Haskell2010,
            otherLanguages = [],
            defaultExtensions = [],
            otherExtensions = [],
            oldExtensions = [],
            extraLibs = [],
            extraLibsStatic = [],
            extraGHCiLibs = [],
            extraBundledLibs = [],
            extraLibFlavours = [],
            extraDynLibFlavours = [],
            extraLibDirs = [],
            extraLibDirsStatic = [],
            includeDirs = [],
            includes = [],
            autogenIncludes = [],
            installIncludes = [],
            options = PerCompilerFlavor
              [
                "-Wall",
                "-Werror=missing-home-modules",
                "-threaded"]
              [],
            profOptions = PerCompilerFlavor
              []
              [],
            sharedOptions =
            PerCompilerFlavor [] [],
            staticOptions =
            PerCompilerFlavor [] [],
            customFieldsBI = [],
            targetBuildDepends = [
              Dependency
                (PackageName "base")
                (UnionVersionRanges
                  (MajorBoundVersion
                    (mkVersion [4, 11, 1, 0]))
                  (MajorBoundVersion
                    (mkVersion [4, 12, 0, 0])))
                mainLibSet,
              Dependency
                (PackageName
                  "jaeger-flamegraph")
                (OrLaterVersion (mkVersion [0]))
                mainLibSet,
              Dependency
                (PackageName "bytestring")
                (MajorBoundVersion
                  (mkVersion [0, 10, 8, 2]))
                mainLibSet,
              Dependency
                (PackageName "containers")
                (MajorBoundVersion
                  (mkVersion [0, 6, 0, 1]))
                mainLibSet,
              Dependency
                (PackageName "extra")
                (MajorBoundVersion
                  (mkVersion [1, 6, 13]))
                mainLibSet,
              Dependency
                (PackageName "aeson")
                (MajorBoundVersion
                  (mkVersion [1, 4, 1, 0]))
                mainLibSet,
              Dependency
                (PackageName
                  "optparse-applicative")
                (MajorBoundVersion
                  (mkVersion [0, 14, 3, 0]))
                mainLibSet,
              Dependency
                (PackageName "text")
                (MajorBoundVersion
                  (mkVersion [1, 2, 3, 1]))
                mainLibSet],
            mixins = []}},
        condTreeConstraints = [
          Dependency
            (PackageName "base")
            (UnionVersionRanges
              (MajorBoundVersion
                (mkVersion [4, 11, 1, 0]))
              (MajorBoundVersion
                (mkVersion [4, 12, 0, 0])))
            mainLibSet,
          Dependency
            (PackageName
              "jaeger-flamegraph")
            (OrLaterVersion (mkVersion [0]))
            mainLibSet,
          Dependency
            (PackageName "bytestring")
            (MajorBoundVersion
              (mkVersion [0, 10, 8, 2]))
            mainLibSet,
          Dependency
            (PackageName "containers")
            (MajorBoundVersion
              (mkVersion [0, 6, 0, 1]))
            mainLibSet,
          Dependency
            (PackageName "extra")
            (MajorBoundVersion
              (mkVersion [1, 6, 13]))
            mainLibSet,
          Dependency
            (PackageName "aeson")
            (MajorBoundVersion
              (mkVersion [1, 4, 1, 0]))
            mainLibSet,
          Dependency
            (PackageName
              "optparse-applicative")
            (MajorBoundVersion
              (mkVersion [0, 14, 3, 0]))
            mainLibSet,
          Dependency
            (PackageName "text")
            (MajorBoundVersion
              (mkVersion [1, 2, 3, 1]))
            mainLibSet],
        condTreeComponents = []}],
  condTestSuites = [
    _×_
      (UnqualComponentName "tests")
      CondNode {
        condTreeData = TestSuite {
          testName = UnqualComponentName
            "",
          testInterface = TestSuiteExeV10
            (mkVersion [1, 0])
            "Driver.hs",
          testBuildInfo = BuildInfo {
            buildable = True,
            buildTools = [],
            buildToolDepends = [
              ExeDependency
                (PackageName "tasty-discover")
                (UnqualComponentName
                  "tasty-discover")
                (MajorBoundVersion
                  (mkVersion [4, 2, 1]))],
            cppOptions = [],
            asmOptions = [],
            cmmOptions = [],
            ccOptions = [],
            cxxOptions = [],
            ldOptions = [],
            hsc2hsOptions = [],
            pkgconfigDepends = [],
            frameworks = [],
            extraFrameworkDirs = [],
            asmSources = [],
            cmmSources = [],
            cSources = [],
            cxxSources = [],
            jsSources = [],
            hsSourceDirs = [
              SymbolicPath "test"],
            otherModules = [
              ModuleName "IntervalTest"],
            virtualModules = [],
            autogenModules = [],
            defaultLanguage = Just
              Haskell2010,
            otherLanguages = [],
            defaultExtensions = [],
            otherExtensions = [],
            oldExtensions = [],
            extraLibs = [],
            extraLibsStatic = [],
            extraGHCiLibs = [],
            extraBundledLibs = [],
            extraLibFlavours = [],
            extraDynLibFlavours = [],
            extraLibDirs = [],
            extraLibDirsStatic = [],
            includeDirs = [],
            includes = [],
            autogenIncludes = [],
            installIncludes = [],
            options = PerCompilerFlavor
              [
                "-Wall",
                "-Werror=missing-home-modules",
                "-threaded"]
              [],
            profOptions = PerCompilerFlavor
              []
              [],
            sharedOptions =
            PerCompilerFlavor [] [],
            staticOptions =
            PerCompilerFlavor [] [],
            customFieldsBI = [],
            targetBuildDepends = [
              Dependency
                (PackageName "base")
                (UnionVersionRanges
                  (MajorBoundVersion
                    (mkVersion [4, 11, 1, 0]))
                  (MajorBoundVersion
                    (mkVersion [4, 12, 0, 0])))
                mainLibSet,
              Dependency
                (PackageName
                  "jaeger-flamegraph")
                (OrLaterVersion (mkVersion [0]))
                mainLibSet,
              Dependency
                (PackageName "tasty")
                (MajorBoundVersion
                  (mkVersion [1, 1, 0, 4]))
                mainLibSet,
              Dependency
                (PackageName "tasty-hspec")
                (MajorBoundVersion
                  (mkVersion [1, 1, 5]))
                mainLibSet,
              Dependency
                (PackageName "tasty-quickcheck")
                (MajorBoundVersion
                  (mkVersion [0, 10]))
                mainLibSet],
            mixins = []},
          testCodeGenerators = []},
        condTreeConstraints = [
          Dependency
            (PackageName "base")
            (UnionVersionRanges
              (MajorBoundVersion
                (mkVersion [4, 11, 1, 0]))
              (MajorBoundVersion
                (mkVersion [4, 12, 0, 0])))
            mainLibSet,
          Dependency
            (PackageName
              "jaeger-flamegraph")
            (OrLaterVersion (mkVersion [0]))
            mainLibSet,
          Dependency
            (PackageName "tasty")
            (MajorBoundVersion
              (mkVersion [1, 1, 0, 4]))
            mainLibSet,
          Dependency
            (PackageName "tasty-hspec")
            (MajorBoundVersion
              (mkVersion [1, 1, 5]))
            mainLibSet,
          Dependency
            (PackageName "tasty-quickcheck")
            (MajorBoundVersion
              (mkVersion [0, 10]))
            mainLibSet],
        condTreeComponents = []}],
  condBenchmarks = []}

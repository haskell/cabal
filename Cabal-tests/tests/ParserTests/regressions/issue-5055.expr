GenericPackageDescription {
  packageDescription =
  PackageDescription {
    specVersion = CabalSpecV2_0,
    package = PackageIdentifier {
      pkgName = PackageName "issue",
      pkgVersion = mkVersion [5055]},
    licenseRaw = Right BSD3,
    licenseFiles = [],
    copyright = "",
    maintainer = "",
    author = "",
    stability = "",
    testedWith = [],
    homepage = "",
    pkgUrl = "",
    bugReports = "",
    sourceRepos = [],
    synopsis =
    "no type in all branches",
    description =
    "no type in all branches.",
    category = "Test",
    customFieldsPD = [],
    buildTypeRaw = Just Simple,
    setupBuildInfo = Nothing,
    library = Nothing,
    subLibraries = [],
    executables = [],
    foreignLibs = [],
    testSuites = [],
    benchmarks = [],
    dataFiles = [],
    dataDir = ".",
    extraSrcFiles = [],
    extraTmpFiles = [],
    extraDocFiles = []},
  gpdScannedVersion = Nothing,
  genPackageFlags = [],
  condLibrary = Nothing,
  condSubLibraries = [],
  condForeignLibs = [],
  condExecutables = [
    _×_
      (UnqualComponentName
        "flag-test-exe")
      CondNode {
        condTreeData = Executable {
          exeName = UnqualComponentName
            "flag-test-exe",
          modulePath = "FirstMain.hs",
          exeScope = ExecutablePublic,
          buildInfo = BuildInfo {
            buildable = True,
            buildTools = [],
            buildToolDepends = [],
            cppOptions = [],
            asmOptions = [],
            cmmOptions = [],
            ccOptions = [],
            cxxOptions = [],
            ldOptions = [],
            hsc2hsOptions = [],
            pkgconfigDepends = [],
            frameworks = [],
            extraFrameworkDirs = [],
            asmSources = [],
            cmmSources = [],
            cSources = [],
            cxxSources = [],
            jsSources = [],
            hsSourceDirs = [],
            otherModules = [],
            virtualModules = [],
            autogenModules = [],
            defaultLanguage = Just
              Haskell2010,
            otherLanguages = [],
            defaultExtensions = [],
            otherExtensions = [],
            oldExtensions = [],
            extraLibs = [],
            extraLibsStatic = [],
            extraGHCiLibs = [],
            extraBundledLibs = [],
            extraLibFlavours = [],
            extraDynLibFlavours = [],
            extraLibDirs = [],
            extraLibDirsStatic = [],
            includeDirs = [],
            includes = [],
            autogenIncludes = [],
            installIncludes = [],
            options = PerCompilerFlavor
              []
              [],
            profOptions = PerCompilerFlavor
              []
              [],
            sharedOptions =
            PerCompilerFlavor [] [],
            staticOptions =
            PerCompilerFlavor [] [],
            customFieldsBI = [],
            targetBuildDepends = [
              Dependency
                (PackageName "base")
                (IntersectVersionRanges
                  (OrLaterVersion
                    (mkVersion [4, 8]))
                  (EarlierVersion
                    (mkVersion [5])))
                mainLibSet],
            mixins = []}},
        condTreeConstraints = [
          Dependency
            (PackageName "base")
            (IntersectVersionRanges
              (OrLaterVersion
                (mkVersion [4, 8]))
              (EarlierVersion
                (mkVersion [5])))
            mainLibSet],
        condTreeComponents = []}],
  condTestSuites = [
    _×_
      (UnqualComponentName
        "flag-cabal-test")
      CondNode {
        condTreeData = TestSuite {
          testName = UnqualComponentName
            "",
          testInterface = TestSuiteExeV10
            (mkVersion [1, 0])
            "SecondMain.hs",
          testBuildInfo = BuildInfo {
            buildable = True,
            buildTools = [],
            buildToolDepends = [],
            cppOptions = [],
            asmOptions = [],
            cmmOptions = [],
            ccOptions = [],
            cxxOptions = [],
            ldOptions = [],
            hsc2hsOptions = [],
            pkgconfigDepends = [],
            frameworks = [],
            extraFrameworkDirs = [],
            asmSources = [],
            cmmSources = [],
            cSources = [],
            cxxSources = [],
            jsSources = [],
            hsSourceDirs = [],
            otherModules = [],
            virtualModules = [],
            autogenModules = [],
            defaultLanguage = Just
              Haskell2010,
            otherLanguages = [],
            defaultExtensions = [],
            otherExtensions = [],
            oldExtensions = [],
            extraLibs = [],
            extraLibsStatic = [],
            extraGHCiLibs = [],
            extraBundledLibs = [],
            extraLibFlavours = [],
            extraDynLibFlavours = [],
            extraLibDirs = [],
            extraLibDirsStatic = [],
            includeDirs = [],
            includes = [],
            autogenIncludes = [],
            installIncludes = [],
            options = PerCompilerFlavor
              []
              [],
            profOptions = PerCompilerFlavor
              []
              [],
            sharedOptions =
            PerCompilerFlavor [] [],
            staticOptions =
            PerCompilerFlavor [] [],
            customFieldsBI = [],
            targetBuildDepends = [
              Dependency
                (PackageName "base")
                (IntersectVersionRanges
                  (OrLaterVersion
                    (mkVersion [4, 8]))
                  (EarlierVersion
                    (mkVersion [5])))
                mainLibSet],
            mixins = []},
          testCodeGenerators = []},
        condTreeConstraints = [
          Dependency
            (PackageName "base")
            (IntersectVersionRanges
              (OrLaterVersion
                (mkVersion [4, 8]))
              (EarlierVersion
                (mkVersion [5])))
            mainLibSet],
        condTreeComponents = [
          CondBranch {
            condBranchCondition =
            `Var (OS Windows)`,
            condBranchIfTrue = CondNode {
              condTreeData = TestSuite {
                testName = UnqualComponentName
                  "",
                testInterface =
                TestSuiteUnsupported
                  (TestTypeUnknown
                    ""
                    (mkVersion [])),
                testBuildInfo = BuildInfo {
                  buildable = True,
                  buildTools = [],
                  buildToolDepends = [],
                  cppOptions = [],
                  asmOptions = [],
                  cmmOptions = [],
                  ccOptions = [],
                  cxxOptions = [],
                  ldOptions = [],
                  hsc2hsOptions = [],
                  pkgconfigDepends = [],
                  frameworks = [],
                  extraFrameworkDirs = [],
                  asmSources = [],
                  cmmSources = [],
                  cSources = [],
                  cxxSources = [],
                  jsSources = [],
                  hsSourceDirs = [],
                  otherModules = [],
                  virtualModules = [],
                  autogenModules = [],
                  defaultLanguage = Nothing,
                  otherLanguages = [],
                  defaultExtensions = [],
                  otherExtensions = [],
                  oldExtensions = [],
                  extraLibs = [],
                  extraLibsStatic = [],
                  extraGHCiLibs = [],
                  extraBundledLibs = [],
                  extraLibFlavours = [],
                  extraDynLibFlavours = [],
                  extraLibDirs = [],
                  extraLibDirsStatic = [],
                  includeDirs = [],
                  includes = [],
                  autogenIncludes = [],
                  installIncludes = [],
                  options = PerCompilerFlavor
                    []
                    [],
                  profOptions = PerCompilerFlavor
                    []
                    [],
                  sharedOptions =
                  PerCompilerFlavor [] [],
                  staticOptions =
                  PerCompilerFlavor [] [],
                  customFieldsBI = [],
                  targetBuildDepends = [],
                  mixins = []},
                testCodeGenerators = []},
              condTreeConstraints = [],
              condTreeComponents = []},
            condBranchIfFalse = Nothing}]}],
  condBenchmarks = []}

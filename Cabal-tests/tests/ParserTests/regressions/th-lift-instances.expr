GenericPackageDescription {
  packageDescription =
  PackageDescription {
    specVersion = CabalSpecV1_10,
    package = PackageIdentifier {
      pkgName = PackageName
        "th-lift-instances",
      pkgVersion = mkVersion
        [0, 1, 4]},
    licenseRaw = Right BSD3,
    licenseFiles = [
      SymbolicPath "LICENSE"],
    copyright =
    "Copyright (C) 2013-2014 Benno F\252nfst\252ck",
    maintainer =
    "Benno F\252nfst\252ck <benno.fuenfstueck@gmail.com>",
    author =
    "Benno F\252nfst\252ck",
    stability = "experimental",
    testedWith = [],
    homepage =
    "http://github.com/bennofs/th-lift-instances/",
    pkgUrl = "",
    bugReports =
    "http://github.com/bennofs/th-lift-instances/issues",
    sourceRepos = [
      SourceRepo {
        repoKind = RepoHead,
        repoType = Just
          (KnownRepoType Git),
        repoLocation = Just
          "https://github.com/bennofs/th-lift-instances.git",
        repoModule = Nothing,
        repoBranch = Nothing,
        repoTag = Nothing,
        repoSubdir = Nothing}],
    synopsis =
    "Lift instances for template-haskell for common data types.",
    description =
    concat
      [
        "Most data types in haskell platform do not have Lift instances. This package provides orphan instances\n",
        "for containers, text, bytestring and vector."],
    category = "Template Haskell",
    customFieldsPD = [
      _×_ "x-revision" "1"],
    buildTypeRaw = Just Custom,
    setupBuildInfo = Nothing,
    library = Nothing,
    subLibraries = [],
    executables = [],
    foreignLibs = [],
    testSuites = [],
    benchmarks = [],
    dataFiles = [],
    dataDir = ".",
    extraSrcFiles = [
      ".ghci",
      ".gitignore",
      ".travis.yml",
      ".vim.custom",
      "README.md"],
    extraTmpFiles = [],
    extraDocFiles = []},
  gpdScannedVersion = Nothing,
  genPackageFlags = [],
  condLibrary = Just
    CondNode {
      condTreeData = Library {
        libName = LMainLibName,
        exposedModules = [
          ModuleName "Instances.TH.Lift"],
        reexportedModules = [],
        signatures = [],
        libExposed = True,
        libVisibility =
        LibraryVisibilityPublic,
        libBuildInfo = BuildInfo {
          buildable = True,
          buildTools = [],
          buildToolDepends = [],
          cppOptions = [],
          asmOptions = [],
          cmmOptions = [],
          ccOptions = [],
          cxxOptions = [],
          ldOptions = [],
          hsc2hsOptions = [],
          pkgconfigDepends = [],
          frameworks = [],
          extraFrameworkDirs = [],
          asmSources = [],
          cmmSources = [],
          cSources = [],
          cxxSources = [],
          jsSources = [],
          hsSourceDirs = [
            SymbolicPath "src"],
          otherModules = [],
          virtualModules = [],
          autogenModules = [],
          defaultLanguage = Just
            Haskell2010,
          otherLanguages = [],
          defaultExtensions = [],
          otherExtensions = [
            EnableExtension
              TemplateHaskell],
          oldExtensions = [],
          extraLibs = [],
          extraLibsStatic = [],
          extraGHCiLibs = [],
          extraBundledLibs = [],
          extraLibFlavours = [],
          extraDynLibFlavours = [],
          extraLibDirs = [],
          extraLibDirsStatic = [],
          includeDirs = [],
          includes = [],
          autogenIncludes = [],
          installIncludes = [],
          options = PerCompilerFlavor
            ["-Wall", "-fwarn-tabs"]
            [],
          profOptions = PerCompilerFlavor
            []
            [],
          sharedOptions =
          PerCompilerFlavor [] [],
          staticOptions =
          PerCompilerFlavor [] [],
          customFieldsBI = [],
          targetBuildDepends = [
            Dependency
              (PackageName "base")
              (IntersectVersionRanges
                (OrLaterVersion
                  (mkVersion [4, 4]))
                (EarlierVersion
                  (mkVersion [5])))
              mainLibSet,
            Dependency
              (PackageName "template-haskell")
              (EarlierVersion
                (mkVersion [2, 10]))
              mainLibSet,
            Dependency
              (PackageName "th-lift")
              (OrLaterVersion (mkVersion [0]))
              mainLibSet,
            Dependency
              (PackageName "containers")
              (IntersectVersionRanges
                (OrLaterVersion
                  (mkVersion [0, 4]))
                (EarlierVersion
                  (mkVersion [0, 6])))
              mainLibSet,
            Dependency
              (PackageName "vector")
              (IntersectVersionRanges
                (OrLaterVersion
                  (mkVersion [0, 9]))
                (EarlierVersion
                  (mkVersion [0, 11])))
              mainLibSet,
            Dependency
              (PackageName "text")
              (IntersectVersionRanges
                (OrLaterVersion
                  (mkVersion [0, 11]))
                (EarlierVersion
                  (mkVersion [1, 3])))
              mainLibSet,
            Dependency
              (PackageName "bytestring")
              (IntersectVersionRanges
                (OrLaterVersion
                  (mkVersion [0, 9]))
                (EarlierVersion
                  (mkVersion [0, 11])))
              mainLibSet],
          mixins = []}},
      condTreeConstraints = [
        Dependency
          (PackageName "base")
          (IntersectVersionRanges
            (OrLaterVersion
              (mkVersion [4, 4]))
            (EarlierVersion
              (mkVersion [5])))
          mainLibSet,
        Dependency
          (PackageName "template-haskell")
          (EarlierVersion
            (mkVersion [2, 10]))
          mainLibSet,
        Dependency
          (PackageName "th-lift")
          (OrLaterVersion (mkVersion [0]))
          mainLibSet,
        Dependency
          (PackageName "containers")
          (IntersectVersionRanges
            (OrLaterVersion
              (mkVersion [0, 4]))
            (EarlierVersion
              (mkVersion [0, 6])))
          mainLibSet,
        Dependency
          (PackageName "vector")
          (IntersectVersionRanges
            (OrLaterVersion
              (mkVersion [0, 9]))
            (EarlierVersion
              (mkVersion [0, 11])))
          mainLibSet,
        Dependency
          (PackageName "text")
          (IntersectVersionRanges
            (OrLaterVersion
              (mkVersion [0, 11]))
            (EarlierVersion
              (mkVersion [1, 3])))
          mainLibSet,
        Dependency
          (PackageName "bytestring")
          (IntersectVersionRanges
            (OrLaterVersion
              (mkVersion [0, 9]))
            (EarlierVersion
              (mkVersion [0, 11])))
          mainLibSet],
      condTreeComponents = []},
  condSubLibraries = [],
  condForeignLibs = [],
  condExecutables = [],
  condTestSuites = [
    _×_
      (UnqualComponentName "tests")
      CondNode {
        condTreeData = TestSuite {
          testName = UnqualComponentName
            "",
          testInterface = TestSuiteExeV10
            (mkVersion [1, 0])
            "Main.hs",
          testBuildInfo = BuildInfo {
            buildable = True,
            buildTools = [],
            buildToolDepends = [],
            cppOptions = [],
            asmOptions = [],
            cmmOptions = [],
            ccOptions = [],
            cxxOptions = [],
            ldOptions = [],
            hsc2hsOptions = [],
            pkgconfigDepends = [],
            frameworks = [],
            extraFrameworkDirs = [],
            asmSources = [],
            cmmSources = [],
            cSources = [],
            cxxSources = [],
            jsSources = [],
            hsSourceDirs = [
              SymbolicPath "tests"],
            otherModules = [
              ModuleName "Data"],
            virtualModules = [],
            autogenModules = [],
            defaultLanguage = Just
              Haskell2010,
            otherLanguages = [],
            defaultExtensions = [],
            otherExtensions = [
              EnableExtension
                TemplateHaskell],
            oldExtensions = [],
            extraLibs = [],
            extraLibsStatic = [],
            extraGHCiLibs = [],
            extraBundledLibs = [],
            extraLibFlavours = [],
            extraDynLibFlavours = [],
            extraLibDirs = [],
            extraLibDirsStatic = [],
            includeDirs = [],
            includes = [],
            autogenIncludes = [],
            installIncludes = [],
            options = PerCompilerFlavor
              []
              [],
            profOptions = PerCompilerFlavor
              []
              [],
            sharedOptions =
            PerCompilerFlavor [] [],
            staticOptions =
            PerCompilerFlavor [] [],
            customFieldsBI = [],
            targetBuildDepends = [
              Dependency
                (PackageName "base")
                (OrLaterVersion (mkVersion [0]))
                mainLibSet,
              Dependency
                (PackageName "template-haskell")
                (EarlierVersion
                  (mkVersion [2, 10]))
                mainLibSet,
              Dependency
                (PackageName "containers")
                (IntersectVersionRanges
                  (OrLaterVersion
                    (mkVersion [0, 4]))
                  (EarlierVersion
                    (mkVersion [0, 6])))
                mainLibSet,
              Dependency
                (PackageName "vector")
                (IntersectVersionRanges
                  (OrLaterVersion
                    (mkVersion [0, 9]))
                  (EarlierVersion
                    (mkVersion [0, 11])))
                mainLibSet,
              Dependency
                (PackageName "text")
                (IntersectVersionRanges
                  (OrLaterVersion
                    (mkVersion [0, 11]))
                  (EarlierVersion
                    (mkVersion [1, 2])))
                mainLibSet,
              Dependency
                (PackageName "bytestring")
                (IntersectVersionRanges
                  (OrLaterVersion
                    (mkVersion [0, 9]))
                  (EarlierVersion
                    (mkVersion [0, 11])))
                mainLibSet,
              Dependency
                (PackageName
                  "th-lift-instances")
                (OrLaterVersion (mkVersion [0]))
                mainLibSet,
              Dependency
                (PackageName "QuickCheck")
                (IntersectVersionRanges
                  (OrLaterVersion
                    (mkVersion [2, 6]))
                  (EarlierVersion
                    (mkVersion [2, 8])))
                mainLibSet],
            mixins = []},
          testCodeGenerators = []},
        condTreeConstraints = [
          Dependency
            (PackageName "base")
            (OrLaterVersion (mkVersion [0]))
            mainLibSet,
          Dependency
            (PackageName "template-haskell")
            (EarlierVersion
              (mkVersion [2, 10]))
            mainLibSet,
          Dependency
            (PackageName "containers")
            (IntersectVersionRanges
              (OrLaterVersion
                (mkVersion [0, 4]))
              (EarlierVersion
                (mkVersion [0, 6])))
            mainLibSet,
          Dependency
            (PackageName "vector")
            (IntersectVersionRanges
              (OrLaterVersion
                (mkVersion [0, 9]))
              (EarlierVersion
                (mkVersion [0, 11])))
            mainLibSet,
          Dependency
            (PackageName "text")
            (IntersectVersionRanges
              (OrLaterVersion
                (mkVersion [0, 11]))
              (EarlierVersion
                (mkVersion [1, 2])))
            mainLibSet,
          Dependency
            (PackageName "bytestring")
            (IntersectVersionRanges
              (OrLaterVersion
                (mkVersion [0, 9]))
              (EarlierVersion
                (mkVersion [0, 11])))
            mainLibSet,
          Dependency
            (PackageName
              "th-lift-instances")
            (OrLaterVersion (mkVersion [0]))
            mainLibSet,
          Dependency
            (PackageName "QuickCheck")
            (IntersectVersionRanges
              (OrLaterVersion
                (mkVersion [2, 6]))
              (EarlierVersion
                (mkVersion [2, 8])))
            mainLibSet],
        condTreeComponents = []},
    _×_
      (UnqualComponentName "doctests")
      CondNode {
        condTreeData = TestSuite {
          testName = UnqualComponentName
            "",
          testInterface = TestSuiteExeV10
            (mkVersion [1, 0])
            "doctests.hs",
          testBuildInfo = BuildInfo {
            buildable = True,
            buildTools = [],
            buildToolDepends = [],
            cppOptions = [],
            asmOptions = [],
            cmmOptions = [],
            ccOptions = [],
            cxxOptions = [],
            ldOptions = [],
            hsc2hsOptions = [],
            pkgconfigDepends = [],
            frameworks = [],
            extraFrameworkDirs = [],
            asmSources = [],
            cmmSources = [],
            cSources = [],
            cxxSources = [],
            jsSources = [],
            hsSourceDirs = [
              SymbolicPath "tests"],
            otherModules = [],
            virtualModules = [],
            autogenModules = [],
            defaultLanguage = Just
              Haskell2010,
            otherLanguages = [],
            defaultExtensions = [],
            otherExtensions = [],
            oldExtensions = [],
            extraLibs = [],
            extraLibsStatic = [],
            extraGHCiLibs = [],
            extraBundledLibs = [],
            extraLibFlavours = [],
            extraDynLibFlavours = [],
            extraLibDirs = [],
            extraLibDirsStatic = [],
            includeDirs = [],
            includes = [],
            autogenIncludes = [],
            installIncludes = [],
            options = PerCompilerFlavor
              ["-Wall", "-threaded"]
              [],
            profOptions = PerCompilerFlavor
              []
              [],
            sharedOptions =
            PerCompilerFlavor [] [],
            staticOptions =
            PerCompilerFlavor [] [],
            customFieldsBI = [],
            targetBuildDepends = [
              Dependency
                (PackageName "base")
                (OrLaterVersion (mkVersion [0]))
                mainLibSet,
              Dependency
                (PackageName "directory")
                (OrLaterVersion
                  (mkVersion [1, 0]))
                mainLibSet,
              Dependency
                (PackageName "doctest")
                (OrLaterVersion
                  (mkVersion [0, 9, 1]))
                mainLibSet,
              Dependency
                (PackageName "filepath")
                (OrLaterVersion (mkVersion [0]))
                mainLibSet],
            mixins = []},
          testCodeGenerators = []},
        condTreeConstraints = [
          Dependency
            (PackageName "base")
            (OrLaterVersion (mkVersion [0]))
            mainLibSet,
          Dependency
            (PackageName "directory")
            (OrLaterVersion
              (mkVersion [1, 0]))
            mainLibSet,
          Dependency
            (PackageName "doctest")
            (OrLaterVersion
              (mkVersion [0, 9, 1]))
            mainLibSet,
          Dependency
            (PackageName "filepath")
            (OrLaterVersion (mkVersion [0]))
            mainLibSet],
        condTreeComponents = [
          CondBranch {
            condBranchCondition =
            `Var (Impl GHC (EarlierVersion (mkVersion [7,6,1])))`,
            condBranchIfTrue = CondNode {
              condTreeData = TestSuite {
                testName = UnqualComponentName
                  "",
                testInterface =
                TestSuiteUnsupported
                  (TestTypeUnknown
                    ""
                    (mkVersion [])),
                testBuildInfo = BuildInfo {
                  buildable = True,
                  buildTools = [],
                  buildToolDepends = [],
                  cppOptions = [],
                  asmOptions = [],
                  cmmOptions = [],
                  ccOptions = [],
                  cxxOptions = [],
                  ldOptions = [],
                  hsc2hsOptions = [],
                  pkgconfigDepends = [],
                  frameworks = [],
                  extraFrameworkDirs = [],
                  asmSources = [],
                  cmmSources = [],
                  cSources = [],
                  cxxSources = [],
                  jsSources = [],
                  hsSourceDirs = [],
                  otherModules = [],
                  virtualModules = [],
                  autogenModules = [],
                  defaultLanguage = Nothing,
                  otherLanguages = [],
                  defaultExtensions = [],
                  otherExtensions = [],
                  oldExtensions = [],
                  extraLibs = [],
                  extraLibsStatic = [],
                  extraGHCiLibs = [],
                  extraBundledLibs = [],
                  extraLibFlavours = [],
                  extraDynLibFlavours = [],
                  extraLibDirs = [],
                  extraLibDirsStatic = [],
                  includeDirs = [],
                  includes = [],
                  autogenIncludes = [],
                  installIncludes = [],
                  options = PerCompilerFlavor
                    ["-Werror"]
                    [],
                  profOptions = PerCompilerFlavor
                    []
                    [],
                  sharedOptions =
                  PerCompilerFlavor [] [],
                  staticOptions =
                  PerCompilerFlavor [] [],
                  customFieldsBI = [],
                  targetBuildDepends = [],
                  mixins = []},
                testCodeGenerators = []},
              condTreeConstraints = [],
              condTreeComponents = []},
            condBranchIfFalse = Nothing}]}],
  condBenchmarks = []}

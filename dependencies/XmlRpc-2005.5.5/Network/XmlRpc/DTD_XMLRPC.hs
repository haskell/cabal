module Network.XmlRpc.DTD_XMLRPC where
{- Generated by a slightly tweaked (turn dots into underscores and
prepend XR to all names) version of DtdToHaskell from HaXml 1.09. -}

import Text.XML.HaXml.Xml2Haskell
import Text.XML.HaXml.OneOfN


{-Type decls-}

newtype XRI4 = XRI4 String 		deriving (Eq,Show)
newtype XRInt = XRInt String 		deriving (Eq,Show)
newtype XRBoolean = XRBoolean String 		deriving (Eq,Show)
newtype XRString = XRString String 		deriving (Eq,Show)
newtype XRDouble = XRDouble String 		deriving (Eq,Show)
newtype XRDateTime_iso8601 = XRDateTime_iso8601 String 		deriving (Eq,Show)
newtype XRBase64 = XRBase64 String 		deriving (Eq,Show)
newtype XRData = XRData [XRValue] 		deriving (Eq,Show)
newtype XRArray = XRArray XRData 		deriving (Eq,Show)
newtype XRName = XRName String 		deriving (Eq,Show)
data XRMember = XRMember XRName XRValue
	      deriving (Eq,Show)
newtype XRStruct = XRStruct [XRMember] 		deriving (Eq,Show)
data XRValue = XRValueXRI4 XRI4
	     | XRValueXRInt XRInt
	     | XRValueXRBoolean XRBoolean
	     | XRValueXRString XRString
	     | XRValueXRDateTime_iso8601 XRDateTime_iso8601
	     | XRValueXRDouble XRDouble
	     | XRValueXRBase64 XRBase64
	     | XRValueXRStruct XRStruct
	     | XRValueXRArray XRArray
	     deriving (Eq,Show)
newtype XRParam = XRParam XRValue 		deriving (Eq,Show)
newtype XRParams = XRParams [XRParam] 		deriving (Eq,Show)
newtype XRMethodName = XRMethodName String 		deriving (Eq,Show)
data XRMethodCall = XRMethodCall XRMethodName (Maybe XRParams)
		  deriving (Eq,Show)
newtype XRFault = XRFault XRValue 		deriving (Eq,Show)
data XRMethodResponse = XRMethodResponseXRParams XRParams
		      | XRMethodResponseXRFault XRFault
		      deriving (Eq,Show)


{-Instance decls-}

instance XmlContent XRI4 where
    fromElem (CElem (Elem "i4" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRI4 a), rest))
	(definite fromText "text" "i4" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRI4 a) =
	[CElem (Elem "i4" [] (toText a))]
instance XmlContent XRInt where
    fromElem (CElem (Elem "int" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRInt a), rest))
	(definite fromText "text" "int" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRInt a) =
	[CElem (Elem "int" [] (toText a))]
instance XmlContent XRBoolean where
    fromElem (CElem (Elem "boolean" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRBoolean a), rest))
	(definite fromText "text" "boolean" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRBoolean a) =
	[CElem (Elem "boolean" [] (toText a))]
instance XmlContent XRString where
    fromElem (CElem (Elem "string" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRString a), rest))
	(definite fromText "text" "string" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRString a) =
	[CElem (Elem "string" [] (toText a))]
instance XmlContent XRDouble where
    fromElem (CElem (Elem "double" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRDouble a), rest))
	(definite fromText "text" "double" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRDouble a) =
	[CElem (Elem "double" [] (toText a))]
instance XmlContent XRDateTime_iso8601 where
    fromElem (CElem (Elem "dateTime.iso8601" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRDateTime_iso8601 a), rest))
	(definite fromText "text" "dateTime.iso8601" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRDateTime_iso8601 a) =
	[CElem (Elem "dateTime.iso8601" [] (toText a))]
instance XmlContent XRBase64 where
    fromElem (CElem (Elem "base64" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRBase64 a), rest))
	(definite fromText "text" "base64" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRBase64 a) =
	[CElem (Elem "base64" [] (toText a))]
instance XmlContent XRData where
    fromElem (CElem (Elem "data" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRData a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRData a) =
	[CElem (Elem "data" [] (concatMap toElem a))]
instance XmlContent XRArray where
    fromElem (CElem (Elem "array" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRArray a), rest))
	(definite fromElem "<data>" "array" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRArray a) =
	[CElem (Elem "array" [] (toElem a))]
instance XmlContent XRName where
    fromElem (CElem (Elem "name" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRName a), rest))
	(definite fromText "text" "name" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRName a) =
	[CElem (Elem "name" [] (toText a))]
instance XmlContent XRMember where
    fromElem (CElem (Elem "member" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (XRMember a b), rest))
	   (definite fromElem "<value>" "member" ca))
	(definite fromElem "<name>" "member" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRMember a b) =
	[CElem (Elem "member" [] (toElem a ++ toElem b))]
instance XmlContent XRStruct where
    fromElem (CElem (Elem "struct" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRStruct a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRStruct a) =
	[CElem (Elem "struct" [] (concatMap toElem a))]
instance XmlContent XRValue where
    fromElem (CElem (Elem "value" [] c0):rest) =
	case (fromElem c0) of
	(Just a,_) -> (Just (XRValueXRI4 a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,_) -> (Just (XRValueXRInt a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,_) -> (Just (XRValueXRBoolean a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,_) -> (Just (XRValueXRString a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,_) -> (Just (XRValueXRDateTime_iso8601 a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,_) -> (Just (XRValueXRDouble a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,_) -> (Just (XRValueXRBase64 a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,_) -> (Just (XRValueXRStruct a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,_) -> (Just (XRValueXRArray a), rest)
									(_,_) ->
									    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRValueXRI4 a) = [CElem (Elem "value" [] (toElem a) )]
    toElem (XRValueXRInt a) = [CElem (Elem "value" [] (toElem a) )]
    toElem (XRValueXRBoolean a) = [CElem (Elem "value" [] (toElem a) )]
    toElem (XRValueXRString a) = [CElem (Elem "value" [] (toElem a) )]
    toElem (XRValueXRDateTime_iso8601 a) = [CElem (Elem "value" [] (toElem a) )]
    toElem (XRValueXRDouble a) = [CElem (Elem "value" [] (toElem a) )]
    toElem (XRValueXRBase64 a) = [CElem (Elem "value" [] (toElem a) )]
    toElem (XRValueXRStruct a) = [CElem (Elem "value" [] (toElem a) )]
    toElem (XRValueXRArray a) = [CElem (Elem "value" [] (toElem a) )]
instance XmlContent XRParam where
    fromElem (CElem (Elem "param" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRParam a), rest))
	(definite fromElem "<value>" "param" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRParam a) =
	[CElem (Elem "param" [] (toElem a))]
instance XmlContent XRParams where
    fromElem (CElem (Elem "params" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRParams a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRParams a) =
	[CElem (Elem "params" [] (concatMap toElem a))]
instance XmlContent XRMethodName where
    fromElem (CElem (Elem "methodName" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRMethodName a), rest))
	(definite fromText "text" "methodName" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRMethodName a) =
	[CElem (Elem "methodName" [] (toText a))]
instance XmlContent XRMethodCall where
    fromElem (CElem (Elem "methodCall" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (XRMethodCall a b), rest))
	   (fromElem ca))
	(definite fromElem "<methodName>" "methodCall" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRMethodCall a b) =
	[CElem (Elem "methodCall" [] (toElem a ++ maybe [] toElem b))]
instance XmlContent XRFault where
    fromElem (CElem (Elem "fault" [] c0):rest) =
	(\(a,ca)->
	   (Just (XRFault a), rest))
	(definite fromElem "<value>" "fault" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRFault a) =
	[CElem (Elem "fault" [] (toElem a))]
instance XmlContent XRMethodResponse where
    fromElem (CElem (Elem "methodResponse" [] c0):rest) =
	case (fromElem c0) of
	(Just a,_) -> (Just (XRMethodResponseXRParams a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,_) -> (Just (XRMethodResponseXRFault a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (XRMethodResponseXRParams a) = [CElem (Elem "methodResponse" [] (toElem a) )]
    toElem (XRMethodResponseXRFault a) = [CElem (Elem "methodResponse" [] (toElem a) )]


{-Done-}
